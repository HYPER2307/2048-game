{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar gameScore = document.querySelector(\".game-score\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar board = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nvar rows = 4;\nvar cols = 4;\nvar score = 0;\nvar hasAvailableMerge = true;\nvar updateTile = function(tile, num) {\n    tile.innerText = \"\";\n    tile.classList.value = \"\";\n    tile.classList.add(\"field-cell\");\n    if (num > 0) {\n        tile.innerText = num;\n        tile.classList.add(\"field-cell--\".concat(num));\n    }\n};\nfor(var r = 0; r < rows; r++){\n    var fieldRows = document.querySelectorAll(\".field-row\");\n    var fieldRow = fieldRows[r];\n    var fieldCells = fieldRow.querySelectorAll(\".field-cell\");\n    for(var c = 0; c < cols; c++){\n        var tile = fieldCells[c];\n        tile.id = r + \"-\" + c;\n        var num = board[r][c];\n        updateTile(tile, num);\n    }\n}\nvar renderBoard = function() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < cols; c++){\n        var cell = document.getElementById(\"\".concat(r, \"-\").concat(c));\n        var num = board[r][c];\n        updateTile(cell, num);\n    }\n};\nvar setNumberToRandomCell = function() {\n    var emptyCells = [];\n    for(var r = 0; r < rows; r++){\n        for(var c = 0; c < cols; c++)if (board[r][c] === 0) emptyCells.push({\n            row: r,\n            col: c\n        });\n    }\n    if (emptyCells.length && hasAvailableMerge) {\n        var randomNumber = Math.random();\n        if (emptyCells.length === rows * cols) {\n            var prevIndex;\n            for(var i = 0; i < 2; i++){\n                var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                var index = randomIndex === prevIndex ? 0 : randomIndex;\n                var _emptyCells_index = emptyCells[index], row = _emptyCells_index.row, col = _emptyCells_index.col;\n                prevIndex = randomIndex;\n                board[row][col] = 2;\n            }\n        } else {\n            var randomIndex1 = Math.floor(Math.random() * emptyCells.length);\n            var _emptyCells_randomIndex = emptyCells[randomIndex1], row1 = _emptyCells_randomIndex.row, col1 = _emptyCells_randomIndex.col;\n            board[row1][col1] = randomNumber < 0.9 ? 2 : 4;\n        }\n        renderBoard();\n    }\n};\nvar filterZero = function(row) {\n    var preparedRow = row.filter(function(num) {\n        return num !== 0;\n    });\n    return preparedRow;\n};\nvar updateGameScore = function(newScore) {\n    gameScore.innerText = newScore;\n    gameScore.value = newScore !== 0 ? \"\".concat(newScore) : \"\";\n};\nvar slide = function(row) {\n    var newRow = filterZero(row);\n    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        score += newRow[i];\n        hasAvailableMerge = true;\n    }\n    updateGameScore(score);\n    newRow = filterZero(newRow);\n    while(newRow.length < cols)newRow.push(0);\n    var stringifiedNewRow = JSON.stringify(newRow);\n    var stringifiedRow = JSON.stringify(row);\n    var isEqual = stringifiedNewRow !== stringifiedRow;\n    if (isEqual) hasAvailableMerge = true;\n    return newRow;\n};\nvar slideLeft = function() {\n    hasAvailableMerge = false;\n    for(var r = 0; r < rows; r++){\n        board[r] = slide(board[r]);\n        for(var c = 0; c < cols; c++){\n            var cell = document.getElementById(\"\".concat(r, \"-\").concat(c));\n            updateTile(cell, board[r][c]);\n        }\n    }\n};\nvar slideRight = function() {\n    hasAvailableMerge = false;\n    for(var r = 0; r < rows; r++){\n        var row = board[r].reverse();\n        row = slide(row).reverse();\n        board[r] = row;\n        for(var c = 0; c < cols; c++){\n            var ceil = document.getElementById(\"\".concat(r, \"-\").concat(c));\n            updateTile(ceil, board[r][c]);\n        }\n    }\n};\nvar slideUp = function() {\n    hasAvailableMerge = false;\n    for(var c = 0; c < cols; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ];\n        row = slide(row);\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            board[r][c] = row[r];\n            board[r][c] = row[r];\n            board[r][c] = row[r];\n            var ceil = document.getElementById(\"\".concat(r, \"-\").concat(c));\n            updateTile(ceil, board[r][c]);\n        }\n    }\n};\nvar slideDown = function() {\n    hasAvailableMerge = false;\n    for(var c = 0; c < cols; c++){\n        var row = [\n            board[0][c],\n            board[1][c],\n            board[2][c],\n            board[3][c]\n        ].reverse();\n        row = slide(row).reverse();\n        board[0][c] = row[0];\n        board[1][c] = row[1];\n        board[2][c] = row[2];\n        board[3][c] = row[3];\n        for(var r = 0; r < rows; r++){\n            var ceil = document.getElementById(\"\".concat(r, \"-\").concat(c));\n            updateTile(ceil, board[r][c]);\n        }\n    }\n};\nvar hasAvailableMoves = function() {\n    var isAvailable = false;\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        for(var c = 0; c < cols - 1; c++)if (row[c] === row[c + 1] || row[c] === 0) isAvailable = true;\n    }\n    for(var c1 = 0; c1 < cols; c1++){\n        var row1 = [\n            board[0][c1],\n            board[1][c1],\n            board[2][c1],\n            board[3][c1]\n        ];\n        for(var r1 = 0; r1 < rows; r1++)if (row1[r1] === row1[r1 + 1] || row1[r1] === 0) isAvailable = true;\n    }\n    return isAvailable;\n};\nvar hasWinCell = function() {\n    var isWin = false;\n    board.forEach(function(cell) {\n        if (cell === 2048) isWin = true;\n    });\n    return isWin;\n};\nvar resetGame = function() {\n    hasAvailableMerge = true;\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    setNumberToRandomCell();\n    score = 0;\n    updateGameScore(score);\n    messageLose.classList.add(\"hidden\");\n    messageWin.classList.add(\"hidden\");\n};\nvar setGame = function() {\n    setNumberToRandomCell();\n    messageStart.classList.add(\"hidden\");\n    var moves = {\n        \"ArrowLeft\": {\n            \"slide\": function() {\n                slideLeft();\n                setNumberToRandomCell();\n            }\n        },\n        \"ArrowRight\": {\n            \"slide\": function() {\n                slideRight();\n                setNumberToRandomCell();\n            }\n        },\n        \"ArrowUp\": {\n            \"slide\": function() {\n                slideUp();\n                setNumberToRandomCell();\n            }\n        },\n        \"ArrowDown\": {\n            \"slide\": function() {\n                slideDown();\n                setNumberToRandomCell();\n            }\n        }\n    };\n    document.addEventListener(\"keydown\", function(param) {\n        var key = param.key;\n        if (!moves.hasOwnProperty(key)) return;\n        moves[key].slide();\n        if (!hasAvailableMoves()) messageLose.classList.remove(\"hidden\");\n        if (hasWinCell()) messageWin.classList.remove(\"hidden\");\n    });\n};\ndocument.addEventListener(\"click\", function(param) {\n    var target = param.target;\n    var start = target.closest(\".start\");\n    var restart = target.closest(\".restart\");\n    if (start) {\n        setGame();\n        start.classList.remove(\"start\");\n        start.classList.add(\"restart\");\n        start.innerText = \"Restart\";\n        start.style.fontSize = \"18px\";\n    }\n    if (restart) resetGame();\n});\n\n//# sourceMappingURL=index.7325d70c.js.map\n","'use strict';\n\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst rows = 4;\nconst cols = 4;\nlet score = 0;\nlet hasAvailableMerge = true;\n\nconst updateTile = (tile, num) => {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num;\n    tile.classList.add(`field-cell--${num}`);\n  }\n};\n\nfor (let r = 0; r < rows; r++) {\n  const fieldRows = document.querySelectorAll('.field-row');\n  const fieldRow = fieldRows[r];\n  const fieldCells = fieldRow.querySelectorAll('.field-cell');\n\n  for (let c = 0; c < cols; c++) {\n    const tile = fieldCells[c];\n\n    tile.id = r + '-' + c;\n\n    const num = board[r][c];\n\n    updateTile(tile, num);\n  }\n}\n\nconst renderBoard = () => {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      const cell = document.getElementById(`${r}-${c}`);\n\n      const num = board[r][c];\n\n      updateTile(cell, num);\n    }\n  }\n};\n\nconst setNumberToRandomCell = () => {\n  const emptyCells = [];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      if (board[r][c] === 0) {\n        emptyCells.push({\n          row: r,\n          col: c,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length && hasAvailableMerge) {\n    const randomNumber = Math.random();\n\n    if (emptyCells.length === rows * cols) {\n      let prevIndex;\n\n      for (let i = 0; i < 2; i++) {\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        const index = randomIndex === prevIndex ? 0 : randomIndex;\n        const { row, col } = emptyCells[index];\n\n        prevIndex = randomIndex;\n        board[row][col] = 2;\n      }\n    } else {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      board[row][col] = randomNumber < 0.9 ? 2 : 4;\n    }\n\n    renderBoard();\n  }\n};\n\nconst filterZero = (row) => {\n  const preparedRow = row.filter(num => num !== 0);\n\n  return preparedRow;\n};\n\nconst updateGameScore = (newScore) => {\n  gameScore.innerText = newScore;\n  gameScore.value = newScore !== 0 ? `${newScore}` : '';\n};\n\nconst slide = (row) => {\n  let newRow = filterZero(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n      hasAvailableMerge = true;\n    }\n  }\n\n  updateGameScore(score);\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < cols) {\n    newRow.push(0);\n  }\n\n  const stringifiedNewRow = JSON.stringify(newRow);\n  const stringifiedRow = JSON.stringify(row);\n\n  const isEqual = stringifiedNewRow !== stringifiedRow;\n\n  if (isEqual) {\n    hasAvailableMerge = true;\n  }\n\n  return newRow;\n};\n\nconst slideLeft = () => {\n  hasAvailableMerge = false;\n\n  for (let r = 0; r < rows; r++) {\n    board[r] = slide(board[r]);\n\n    for (let c = 0; c < cols; c++) {\n      const cell = document.getElementById(`${r}-${c}`);\n\n      updateTile(cell, board[r][c]);\n    }\n  }\n};\n\nconst slideRight = () => {\n  hasAvailableMerge = false;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r].reverse();\n\n    row = slide(row).reverse();\n    board[r] = row;\n\n    for (let c = 0; c < cols; c++) {\n      const ceil = document.getElementById(`${r}-${c}`);\n\n      updateTile(ceil, board[r][c]);\n    }\n  }\n};\n\nconst slideUp = () => {\n  hasAvailableMerge = false;\n\n  for (let c = 0; c < cols; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n      board[r][c] = row[r];\n      board[r][c] = row[r];\n      board[r][c] = row[r];\n\n      const ceil = document.getElementById(`${r}-${c}`);\n\n      updateTile(ceil, board[r][c]);\n    }\n  }\n};\n\nconst slideDown = () => {\n  hasAvailableMerge = false;\n\n  for (let c = 0; c < cols; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]].reverse();\n\n    row = slide(row).reverse();\n\n    board[0][c] = row[0];\n    board[1][c] = row[1];\n    board[2][c] = row[2];\n    board[3][c] = row[3];\n\n    for (let r = 0; r < rows; r++) {\n      const ceil = document.getElementById(`${r}-${c}`);\n\n      updateTile(ceil, board[r][c]);\n    }\n  }\n};\n\nconst hasAvailableMoves = () => {\n  let isAvailable = false;\n\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n\n    for (let c = 0; c < cols - 1; c++) {\n      if (row[c] === row[c + 1] || row[c] === 0) {\n        isAvailable = true;\n      }\n    }\n  }\n\n  for (let c = 0; c < cols; c++) {\n    const row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    for (let r = 0; r < rows; r++) {\n      if (row[r] === row[r + 1] || row[r] === 0) {\n        isAvailable = true;\n      }\n    }\n  }\n\n  return isAvailable;\n};\n\nconst hasWinCell = () => {\n  let isWin = false;\n\n  board.forEach(cell => {\n    if (cell === 2048) {\n      isWin = true;\n    }\n  });\n\n  return isWin;\n};\n\nconst resetGame = () => {\n  hasAvailableMerge = true;\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  setNumberToRandomCell();\n\n  score = 0;\n\n  updateGameScore(score);\n\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n};\n\nconst setGame = () => {\n  setNumberToRandomCell();\n\n  messageStart.classList.add('hidden');\n\n  const moves = {\n    'ArrowLeft': {\n      'slide': () => {\n        slideLeft();\n        setNumberToRandomCell();\n      },\n    },\n\n    'ArrowRight': {\n      'slide': () => {\n        slideRight();\n        setNumberToRandomCell();\n      },\n    },\n\n    'ArrowUp': {\n      'slide': () => {\n        slideUp();\n        setNumberToRandomCell();\n      },\n    },\n\n    'ArrowDown': {\n      'slide': () => {\n        slideDown();\n        setNumberToRandomCell();\n      },\n    },\n  };\n\n  document.addEventListener('keydown', ({ key }) => {\n    if (!moves.hasOwnProperty(key)) {\n      return;\n    };\n\n    moves[key].slide();\n\n    if (!hasAvailableMoves()) {\n      messageLose.classList.remove('hidden');\n    }\n\n    if (hasWinCell()) {\n      messageWin.classList.remove('hidden');\n    }\n  });\n};\n\ndocument.addEventListener('click', ({ target }) => {\n  const start = target.closest('.start');\n  const restart = target.closest('.restart');\n\n  if (start) {\n    setGame();\n\n    start.classList.remove('start');\n    start.classList.add('restart');\n    start.innerText = 'Restart';\n    start.style.fontSize = '18px';\n  }\n\n  if (restart) {\n    resetGame();\n  }\n});\n"],"names":["gameScore","document","querySelector","messageStart","messageLose","messageWin","board","score","hasAvailableMerge","updateTile","tile","num","innerText","classList","value","add","concat","r","fieldCells","fieldRow","fieldRows","querySelectorAll","c","id","renderBoard","getElementById","setNumberToRandomCell","prevIndex","emptyCells","push","row","col","length","rows","i","randomIndex","Math","floor","random","_emptyCells_index","randomIndex1","_emptyCells_randomIndex","row1","col1","randomNumber","filterZero","filter","updateGameScore","newScore","slide","newRow","JSON","stringify","slideLeft","slideRight","reverse","slideUp","slideDown","hasAvailableMoves","isAvailable","cols","c1","r1","hasWinCell","isWin","forEach","cell","resetGame","setGame","moves","addEventListener","param","key","hasOwnProperty","remove","target","start","closest","restart","style","fontSize"],"version":3,"file":"index.7325d70c.js.map"}